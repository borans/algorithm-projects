import java.io.*;
import java.util.Map;
import java.util.Scanner;

/**
 * This class accomplishes Mission Firewall
 */
public class MalwareScanner {

    private final Map<String, Malware> malwareDB;

    public MalwareScanner(Map<String, Malware> malwareDB) {
        this.malwareDB = malwareDB;
    }



    /**
     * TODO: Open and read the input file while searching for threats
     * TODO: Write results to both; a new file name "scanLog.txt" and to the console
     *
     * @param filename the input file
     * @throws IOException the io exception
     */
    public void scanFile(String filename) throws IOException {
        // TODO: YOUR CODE HERE

        BufferedReader bufferedReader = new BufferedReader(new FileReader(filename));
        PrintWriter writer = new PrintWriter("scanLog.txt", "UTF-8");

        String line;
        int lineNum = 1;
        int count = 0;
        while ((line = bufferedReader.readLine()) != null){
            String encrypted_line = turbo64(line);


            for(String name : malwareDB.keySet() ){
                if(encrypted_line.equals(name)){
                    writer.println(name + "@" + lineNum);
                    System.out.println("Detected malware!");
                    System.out.println(malwareDB.get(name).toString());
                    System.out.println("--------------------------------------------------------------------------------");
                    count++;
                    break;
                }
            }
            lineNum++;
        }
        System.out.println("Scan complete! " + count + " threats are found and eliminated. Generating log file...");
        writer.close();
    }



    public static String turbo64(String in) {
        // Implement turbo64 algorithm given by the assignment instructions
        // TODO: YOUR CODE HERE


        long MOD_TURBO = 4294967291L;
        int a = 0;
        int b = 1;
        for(int i=0; i<in.length(); i++){
            a = (int) ((a + in.charAt(i)) % MOD_TURBO);
            b = (int) ((a+b) % MOD_TURBO);
        }

        long returnValue = ((long) b << 32) | a;

        return Long.toHexString(returnValue);
    }
}
